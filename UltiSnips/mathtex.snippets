global !p

HatSequence = r"\overline \bar \hat \tilde \widetilde \widehat".split()

DotsSequence = r"\ldots \cdots \vdots \ddots".split()

FontSizeSequence = r"\tiny \scriptsize \footnotesize \small \normalsize \large \Large \LARGE \huge \Huge".split()

SpaceSequence = r"\,|\:|\;|\ |\quad|\qquad|\!".split("|")


LeftArrows = r"\leftarrow|\longleftarrow|\Leftarrow|\Longleftarrow|\xleftarrow".split("|")

RightArrows = r"\rightarrow|\longrightarrow|\Rightarrow|\Longrightarrow|\xrightarrow".split("|")

LeftrightArrows = ["\\" + x for x in "leftrightarrow|longleftrightarrow|Leftrightarrow|Longleftrightarrow|iff".split("|")]

import re

from snippet_helpers import last_p1_not_p2, first_p1_not_p2

def math():
	if vim.eval('&filetype') == 'tex':
		return vim.eval('vimtex#syntax#in_mathzone()') == '1'
	elif vim.eval('&filetype') == 'markdown':
		if vim_left_last_p1_not_p2(r"https://www.zhihu.com/equation\?tex=\" alt=\"", r"eeimg=\"") and vim_right_first_p1_not_p2(r"eeimg=\"", r"https://www.zhihu.com/equation\?tex=\" alt=\""):
			return True
		lp = vim_left_paragraph()
		rp = vim_right_paragraph()
		lp = " ".join(lp)
		rp = " ".join(rp)
		lp = re.sub(r"(?<!\\)(\\\\)*\\$", "", lp)
		rp = re.sub(r"(?<!\\)(\\\\)*\\$", "", rp)
		tlp = re.sub(r"(?<!\\)(\\\\)*$$", "", lp)
		trp = re.sub(r"(?<!\\)(\\\\)*$$", "", rp)
		if tlp.count("$") % 2 == 1 and "$" in trp:
			return True
		if last_p1_not_p2(lp, "$$", "$") and first_p1_not_p2(rp, "$$", "$") and tlp.count("$$") % 2 == 1:
			return True
		return False

# helper functions for math()
def vim_left_paragraph():
	currentlinenumber = int(vim.eval("line('.')"))
	left = vim.eval("getline('.')[0:col('.')-2]")
	lp = [left]
	for index in range(currentlinenumber-1, -1, -1):
		tline = vim.eval("getline(%d)" % index)
		if not tline.strip():
			return lp
		lp = [tline] + lp
	return lp


def vim_right_paragraph():
	currentlinenumber = int(vim.eval("line('.')"))
	right = vim.eval("getline('.')[col('.')-1:]")
	rp = [right]
	for index in range(currentlinenumber+1, int(vim.eval("line('$')")) + 1):
		tline = vim.eval("getline(%d)" % index)
		if not tline.strip():
			return rp
		rp.append(tline)
	return rp


def vim_left_last_p1_not_p2(p1, p2):
	currentlinenumber = int(vim.eval("line('.')"))
	# currentline = vim.eval("getline('.')")
	# currentcol = int(vim.eval("col('.')"))
	left = vim.eval("getline('.')[:col('.')-2]")
	p1s = re.search(p1, left)
	p2s = re.search(p2, left)
	# print(p1, left, p1s)
	# print(p2, left, p2s)
	# print("left: $%s$" % left)
	if p1s and not p2s:
		return True
	if p2s and not p1s:
		return False
	if p1s and p2s:
		return last_p1_not_p2(left, p1, p2) == 1
	else:
		for index in range(int(vim.eval("line('$')")) - 1, 0, -1):
			tline = vim.eval("getline(%d)" % index)
			if not tline.strip():
				return False
			p1s = re.search(p1, tline)
			p2s = re.search(p2, tline)
			if p1s and not p2s:
				return True
			if p2s and not p1s:
				return False
			if p1s and p2s:
				return last_p1_not_p2(tline, p1, p2) == 1
	return False

def vim_right_first_p1_not_p2(p1, p2):
	currentlinenumber = int(vim.eval("line('.')"))
	# currentline = vim.eval("getline('.')")
	# currentcol = int(vim.eval("col('.')"))
	# right = currentline[currentcol-1:]
	right = vim.eval("getline('.')[col('.')-1:]")
	p1s = re.search(p1, right)
	p2s = re.search(p2, right)
	# print(p1, right, p1s)
	# print(p2, right, p2s)
	# print("right: $%s$" % right)
	if p1s and not p2s:
		return True
	if p2s and not p1s:
		return False
	if p1s and p2s:
		return first_p1_not_p2(right, p1, p2) == 1
	else:
		for index in range(currentlinenumber+1, int(vim.eval("line('$')")) + 1):
			tline = vim.eval("getline(%d)" % index)
			if not tline.strip():
				return False
			p1s = re.search(p1, tline)
			p2s = re.search(p2, tline)
			if p1s and not p2s:
				return True
			if p2s and not p1s:
				return False
			if p1s and p2s:
				return first_p1_not_p2(tline, p1, p2) == 1
	return False

def environment(default_envname = None, lastemptyline = False):
	currentlinenumber = int(vim.eval("line('.')"))
	if lastemptyline and vim.eval("getline(%d)" % currentlinenumber).strip() != "":
		return ""
	for index in range(currentlinenumber - 1, 0, -1):
		if vim.eval("getline(%d)" % index).endswith("\\\\"):
			continue
		else:
			ob = re.fullmatch(r".*\\begin{(\w+\*?)}({\w+})?(\[\w+\])?", vim.eval("getline(%d)" % index))
			if ob:
				env_name = ob.group(1)
				break
			else:
				return ""
	else:
		return ""
	for index in range(currentlinenumber + 1, (int(vim.eval("line('$')")) if not lastemptyline else (currentlinenumber + 1)) + 1):
		if vim.eval("getline(%d)" % index).endswith("\\\\"):
			continue
		ob = re.fullmatch(r".*\\end{(\w+\*?)}", vim.eval("getline(%d)" % index))
		if ob:
			if env_name == ob.group(1):
				if default_envname is None:
					return env_name
				else:
					return env_name == default_envname
			else:
				return ""
		else:
			return ""
	else:
		return ""

def extract_operator(line):
	line = line.strip()
	if line[0] in ["=", "<", ">"]:
		return line[0]
	elif line[0] != "\\":
		return ""
	else:
		if not line[1].isalpha():
			return ""
		rv = "\\" + re.fullmatch("([a-zA-Z]+)([^a-zA-Z].*)", line[1:]).group(1)
		remain = re.fullmatch("([a-zA-Z]+)([^a-zA-Z].*)", line[1:]).group(2)
		if remain and remain[0] == "{":
			index = 0
			depth = 0
			while index < len(remain):
				if remain[index] == "{":
					depth += 1
					index += 1
					continue
				elif remain[index] == "}":
					depth -= 1
					index += 1
					if depth == 0:
						rv += remain[:index]
						break
					continue
				elif remain[index] == "\\":
					index += 2
					continue
				else:
					index += 1
					continue
		return rv

def findfirstoperator(line):
		index = 0
		depth = 0
		while index < len(line):
				if line[index] == '\s':
						index += 1
						continue
				elif line[index] in ['{', '(']:
						depth += 1
						index += 1
						continue
				elif line[index] in ['}', ')']:
						depth -= 1
						index += 1
						continue
				elif depth <= 0 and line[index] == '=':
						return index
				elif depth <= 0 and all(line[index:].startswith(x) for x in ["\\le", "\\ge", ">", "<", "\\succ", "\\prec", "\\sim", "\\ne", "\\not"]):
						return index
				else:
						index += 1
						continue
		else:
				return len(line) - len(line.lstrip())

def findmatched_parentheses(line, lindex):
	depth = 0
	matched = {"(":")", ")":"(", "[":"]", "]":"[", "{":"}", "}":"{"}
	c = line[lindex]
	d = matched[c]
	if line[lindex] in ["(", "[", "{"]:
		for index in range(lindex, len(line)):
			if line[index] == c:
				depth += 1
			elif line[index] == d:
				depth -= 1
			if depth == 0:
				return index
	elif line[lindex] in [")", "]", "}"]:
		for index in range(lindex, -1, -1):
			if line[index] == c:
				depth += 1
			elif line[index] == d:
				depth -= 1
			if depth == 0:
				return index
	return -1

def vim_left_all(max_line = 100, offset = 0):
	left = vim.eval("getline('.')[:col('.')-2+(%d)]" % offset)
	content = [left]
	currentlinenumber = int(vim.eval("line('.')"))
	for index in range(currentlinenumber-1, max(0, currentlinenumber - max_line) if max_line > 0 else -1, -1):
		content.append(vim.eval('getline(%d)' % index))
	return content

def add_placeholder(snip):
	info = snip.buffer[snip.line]
	snip.buffer[snip.line] = ''
	# print(info)
	snip.expand_anon(info)


def generate_matrix(prefix, snip):
	info = snip.buffer[snip.line]
	spacelen = len(info) - len(info.lstrip())
	linfo = info[:snip.snippet_start[1]]
	rinfo = info[snip.snippet_end[1]:]
	info = info[snip.snippet_start[1]:snip.snippet_end[1]]
	# print([linfo, rinfo, info])
	if len(info) > 1 and info[1].isnumeric():
		real_shape = info[:2]
		virtual_shape = info[2:]
	else:
		real_shape = info[0]
		virtual_shape = info[1:]
	if len(real_shape) == 1:
		row_amount = int(real_shape)
		column_amount = int(real_shape)
	else:
		row_amount = int(real_shape[0])
		column_amount = int(real_shape[1])
	if len(virtual_shape) == 0:
		virtual_row_amount = "0"
		virtual_column_amount = "0"
	elif len(virtual_shape) == 1:
		virtual_row_amount = virtual_shape[0]
		virtual_column_amount = virtual_shape[0]
	else:
		virtual_row_amount = virtual_shape[0]
		virtual_column_amount = virtual_shape[1]
	snip.buffer[snip.line] = ''
	displayed = re.sub(r"\\", r"\\\\", linfo) + "\\begin{%cmatrix}\n" % prefix
	def generate_code(i, j, row, column, virtual_row, virtual_column):
		if i == 1 and j == 1:
			return ""
		else:
			code = """`!p
from snippet_helpers import generate_matrix_element
snip.rv = generate_matrix_element(%d, %d, %d, %d, '%c', '%c', [%s], [%s])
`""" % (i, j, row, column, virtual_row, virtual_column, "''," + ",".join("t[%d]" % x for x in range(1, j+1)), "''," + ",".join("t[%d]" % (1 + column * (x-1)) for x in range(1, i+1)))
		return code
	if row_amount > 0 and column_amount > 0:
		displayed += " " * (4 + len(linfo)) + "$1\t" + ("& " if column_amount > 1 else "\\" * 4)
		index = 2
		for i in range(2, column_amount + 1):
			displayed += "${" + "{}".format(index) + ":" + generate_code(1, i, row_amount, column_amount, virtual_row_amount, virtual_column_amount) + "}\t" + ("& " if i < column_amount else "\\" * 4)
			index += 1
		displayed += "\n"
		for j in range(2, row_amount + 1):
			displayed += " " * (4 + len(linfo))
			for i in range(1, column_amount + 1):
				displayed += "${" + "{}".format(index) + ":" + generate_code(j, i, row_amount, column_amount, virtual_row_amount, virtual_column_amount) + "}\t" + ("& " if i < column_amount else "\\" * 4)
				index += 1
			displayed += "\n"
	displayed += " " * len(linfo) + "\\end{%cmatrix}$0" % prefix + (" " + re.sub(r"\\", r"\\\\", rinfo) if rinfo else "")
	snip.expand_anon(displayed)

def complete(input_str, candidate):
	candidate = [x[len(input_str):] for x in candidate if x.startswith(input_str)]
	if len(candidate) == 1:
		return candidate[0]
	elif "" in candidate:
		return ""
	elif candidate:
		return "(" + "|".join(candidate) + ")"
	else:
		return ""
endglobal


snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet "\s*mk" "Math" wrA
`!p
if not snip.c:
	ret = ""
	if int(vim.eval('col(".")')) > 1:
		ret += " "
	if snip.buffer[0] == "autoscale: true":
		ret += "$$"
	else:
		ret += "$"
	snip.rv += ret + snip.v.text
`$1`!p
if not snip.c:
	if snip.buffer[0] == "autoscale: true":
		snip.rv += "$$"
	else:
		snip.rv += "$"
`$0
endsnippet

context "math()"
snippet ali "Align" bA
\begin{aligned}
${1:`!p
selectedcode = [x for x in snip.v.text.split("\n") if x]
for (i, x) in enumerate(selectedcode):
		index = findfirstoperator(x)
		snip.rv += ("" if i == 0 else "    ") + x[:index] + "&" + x[index:] + "\\\\" + ("" if i == len(selectedcode) - 1 else "\n")
`}
\end{aligned}
endsnippet

snippet bali "Align with {" bA
\[
\left\{
\begin{aligned}
${1:`!p
selectedcode = [x for x in snip.v.text.split("\n") if x]
for (i, x) in enumerate(selectedcode):
		index = findfirstoperator(x)
		snip.rv += ("" if i == 0 else "    ") + x[:index] + "&" + x[index:] + "\\\\" + ("" if i == len(selectedcode) - 1 else "\n")
`}\end{aligned}
\]
endsnippet

# . \\,  -> , \\
context "math()"
snippet "[,.]?\s*\\\\\s*([,.])" "" irA
`!p snip.rv=match.group(1)` \\\\
endsnippet

#  ,\\
#  \end{aligned}
#  \] .
#  , \\
#  \end{aligned}
#  \] .
#  , \\  
#		 .	 \end{aligned}
#		. \] .
#  ,	 
#		 .	 \end{aligned}
#		. \] .
#  
#  ,	.		\end{aligned}
#		. \],
# snippet "([,.]?)\s*(\\\\)?(\n?)\s*[,.]?\s*(\\end{aligned})(\n?)\s*[,.]?\s*(\\])\s*([,.])" "align comma" irmA
# `!p snip.rv = match.group(3) +match.group(7) +match.group(4) +match.group(5) +match.group(6)`
# endsnippet


### Fraction
context "math()"
snippet // "Fraction" iA
\\frac{${1:${VISUAL}}}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 100
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^(.*\))(\^\d|\^{[^{}]+})/' "()^2 frac" wrA
`!p
stripped = match.group(1)
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i:] + match.group(2) + "}"
`{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet
### END Fraction


### Smart dots
# For example x_1 x_2  ... x_n x_n (The product of a sequence)
priority 100
context math()
snippet ... "cdots" iA
\cdots 
endsnippet
# +... -> , \cdots
# -  ... -> , \cdots
# add a space if there already is one.
priority 101
snippet "(?<=[-+])\s*\.\.\." "smart cdots" irA
 \cdots 
endsnippet
# It seems that \ldots is only used when , ..., 
# ,... -> , \ldots
# ,  ... -> , \ldots
priority 101
context math()
snippet "(?<=[,;])(\s*)\.\.\." "smart ldots" irA
 \ldots 
endsnippet


context math()
snippet · "unicode -> cdot" iA
\cdot
endsnippet
context math()
snippet . "cdot" i
\cdot
endsnippet
### END Smart dots


snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet if "if mbox and \iff" wA
`!p
if t[1] and t[1][0] == 'f':
	snip.rv = "\\if"
else:
	snip.rv = "\\mbox{if }"
`$1
endsnippet




context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= ${1:${VISUAL}} \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" A
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" A
\left\lfloor $1 \right\rfloor$0
endsnippet

# alternative trigger |__|
# "\|_" is excluded
context "math()"
snippet "(?<![\\])\|_" "floor" riA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet pmat "pmat" wm
\begin{pmatrix}${1:`!p
# add &
regex = r"(?<=\w)[ \t]+(?=\w)"
subst = r"\t&\t"
snip.rv = re.sub(regex, subst, snip.v.text, 0, re.MULTILINE)
# add \t\\\n
snip.rv = ("\t\\\\\n"+snip.mkline()).join([x.strip() for x in snip.rv.split("\n") if x])
# one line or multiple lines
if snip.v.text.count('\n') > 1:
	snip.rv = '\n' + snip.mkline() + snip.rv + '\n' + snip.mkline()
else:
	snip.rv = " " + snip.rv + " "
`}\end{pmatrix} $0
endsnippet

post_jump "generate_matrix('p', snip)"
context "math()"
snippet "pmat\(([1-9]{1,2}[a-zA-Z]{0,2})\)" "pmat" irw
`!p
if not snip.c:
	snip.rv = match.group(1)
`
endsnippet

# seperate each element with spaces or \t select them and trigger
# the snippets bellow, it will be properly wrapped in a matrix environment.
# Example:
# select the folling two line in visual mode
# 1 0 9 2 8
# 9 8 733 0 7
# bmat<tab>
# it will turn to
# \begin{bmatrix}
# 1	&	0	&	9	&	2	&	8	\\
# 9	&	8	&	733	&	0	&	7
# \end{bmatrix}
# Hint: This snippet will not check the dimension of the matrix
# You cannot use this with block selection mode i.e. CTRL-V
context "math()"
snippet bmat "bmat" wm
\begin{bmatrix}${1:`!p
# add &
regex = r"(?<=\w)[ \t]+(?=\w)"
subst = r"\t&\t"
snip.rv = re.sub(regex, subst, snip.v.text, 0, re.MULTILINE)
# add \t\\\n
snip.rv = ("\t\\\\\n"+snip.mkline()).join([x.strip() for x in snip.rv.split("\n") if x])
# one line or multiple lines
if snip.v.text.count('\n') > 1:
	snip.rv = '\n' + snip.mkline() + snip.rv + '\n' + snip.mkline()
else:
	snip.rv = " " + snip.rv + " "
`}\end{bmatrix} $0
endsnippet

post_jump "generate_matrix('b', snip)"
context "math()"
snippet "bmat\(([1-9]{1,2}[a-zA-Z]{0,2})\)" "bmat" irw
`!p
if not snip.c:
	snip.rv = match.group(1)
`
endsnippet

context "math()"
snippet "(?<=\()@" "copy in parathesis" wr
$1`!p
content = vim_left_all(100)
candidate = sum([re.findall(r"(?<=\()[^()]+(?=\))", x)[::-1] for x in content], [])
candidate = list(dict.fromkeys(candidate))
candidate = [x[len(t[1]):] for x in candidate if x.startswith(t[1]) and len(t[1]) < len(x)]
if len(candidate) == 1:
	snip.rv = candidate[0]
elif candidate:
	snip.rv = candidate[0]
else:
	snip.rv = ""
`$0
endsnippet

# context "math()"
# snippet ( "( )" iA
# ($1) $0
# endsnippet

snippet lrp "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

# snippet lr( "left( right)" i
# \left( ${1:${VISUAL}} \right) $0
# endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrB "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet "(?<!\\)suma" "sum of array" wrA
\sum_{${1:i}=1}^{${2:n}} $0
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

snippet ∂ "\partial" iA
\partial 
endsnippet

snippet diff "d/dx" w
\frac{\mathrm{d}${1:y}}{\mathrm{d}${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet "(?<=([\w}\)\]]))tp" "transpose" irA
^\top
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet tb "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

context "math() and {'works': 0}"
snippet "^(.*)(\\\w+|(?<![\w\\])\w+)__" "subscript" wrA
`!p
if not snip.c:
	snip.rv = match.group(1) + match.group(2)
`_{$1`!p
# print("line [670] match.group(1): ###%s###" % match.group(1))
# print("line [671] match.group(2): ###%s###" % match.group(2))
# print("line [672] int(vim.eval(\"col('.')\")) - len(match.group(1)) - len(match.group(2)) - len(t[1]): ###%s###" % (int(vim.eval("col('.')")) - len(match.group(1)) - len(match.group(2)) - len(t[1])))
# print("^^^^^^^^^^^^^^^^^^^^^^^^^^")
# print("line [674] snip.context['works']: ###%s###" % snip.context['works'])
# print("line [675] vim.eval(\"col('.')\"): ###%s###" % vim.eval("col('.')"))
if snip.context['works'] == 0:
	if int(vim.eval("col('.')")) - len(match.group(1)) - len(match.group(2)) - len(t[1]) <= 3:
		name = match.group(2)
		if name[0] == "\\":
			name = "\\\\" + name[1:]
		content = [match.group(1)]
		# content = []
		currentlinenumber = int(vim.eval("line('.')"))
		max_line = 100
		for index in range(currentlinenumber-1, max(0, currentlinenumber - max_line) if max_line > 0 else -1, -1):
			content.append(snip.buffer[index-1])
		# print("line [671] t[1]: ###%s###" % t[1])
		# print("line [672] vim.eval(\"getline('.')\"): ###%s###" % vim.eval("getline('.')"))
		# print("line [673] content: ###%s###" % content)
		# print("line [674] vim.eval(\"col('.')\"): ###%s###" % vim.eval("col('.')"))
		candidate = sum([[t[0] for t in re.findall("(?<=" + name + r"_\{)(([^\{\}]+|\{[^\{\}]+\})+)(?=\})", x)][::-1] for x in content], [])
		candidate = list(dict.fromkeys(candidate))
		candidate = [x[len(t[1]):] for x in candidate if x.startswith(t[1]) and len(t[1]) < len(x)]
		# print("line [679] candidate: ###%s###" % candidate)
		if candidate:
			snip.rv = candidate[0]
		else:
			snip.rv = " "
		# # print("line [704] vim.eval(\"col('.')\"): ###%s###" % vim.eval("col('.')"))
	elif int(vim.eval("col('.')")) - len(match.group(1)) - len(match.group(2)) - len(t[1]) > 3:
		snip.context['works'] = snip.context['works'] + 1
		# snip.rv = ""
		# print("line [686] vim.eval(\"getline('.')\"): ###%s###" % vim.eval("getline('.')"))
		# print("line [687] vim.eval(\"col('.')\"): ###%s###" % vim.eval("col('.')"))
		# print("line [688] match.group(1): ###%s###" % match.group(1))
		# print("line [689] match.group(2): ###%s###" % match.group(2))
		# print("line [691] gap: ###%s###" % (int(vim.eval("col('.')")) - len(match.group(1)) - len(match.group(2)) - len(t[1])))
		# print("line [684] snip.rv: ###%s###" % snip.rv)
else:
	snip.context['works'] = snip.context['works'] + 1
`}$0
endsnippet

snippet ooo "\infty" iA
\infty 
endsnippet

snippet ∞ "\infty" iA
\infty 
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\leq 
endsnippet

snippet ≤ "leq" iA
\leq 
endsnippet

snippet >= "geq" iA
\geq 
endsnippet

snippet ≥ "geq" i
\geq 
endsnippet


# for all and for

# ## end with space so you need option "r" to enable regex
context "math()"
snippet "for " "for and for all text box" riA
\text{ for } 
endsnippet

context "math()"
snippet "\\text{ for }\s*all" "for and for all text box" rwA
\text{ for all } 
endsnippet

priority 100
context "math()"
snippet "(forall|AA|∀)" "forall" riA
\forall
endsnippet

priority 101
context "math()"
snippet "(?<=,)\s*(forall|AA)" "forall" riA
\quad\forall 
endsnippet

context "math()"
snippet "for all" "forall" iA
\text{ for all }  
endsnippet
# END for and for all

context "math()"
snippet EE "exist" iA
\exists
endsnippet

### Fast subscript
context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


priority 100
context "math()"
snippet "\b([a-zA-Z])ii" "?i" riA
`!p snip.rv=match.group(1)`_{i}
endsnippet

priority 101
context "math()"
snippet "(\d[a-zA-Z]|\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega)ii" "?i" riA
`!p snip.rv=match.group(1)`_{i}
endsnippet

priority 100
context "math()"
snippet "\b([a-zA-Z])jj" "?j" riA
`!p snip.rv=match.group(1)`_{j}
endsnippet

priority 100
context "math()"
snippet "(\d[a-zA-Z]|\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega)jj" "?j" riA
`!p snip.rv=match.group(1)`_{j}
endsnippet


# xup3  -> x_{u+3}
priority 2000
context "math()"
snippet "(?!=^\\)([a-zA-Z])([a-zA-Z])p(\d)" "x[n+1]" rA
`!p snip.rv=match.group(1)`_{`!p snip.rv=match.group(2)`+`!p snip.rv=match.group(3)`}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet


context "math()"
snippet mcal "mathcal" i
\mathcal{${1:$VISUAL}}$0
endsnippet

context "math()"
snippet mbb "mathbb" i
\mathbb{$1}$0
endsnippet

context "math()"
snippet mrm "mathrm" i
\mathrm{$1}$0
endsnippet

context "math()"
snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet "(?<!\\)nabla" "nabla" irA
\nabla 
endsnippet

context "math()"
snippet "(?<!\\)grad" "nabla" irA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet × "cross" i
\times 
endsnippet

priority 100
context "math()"
snippet ** "star" iA
^{*}
endsnippet

context "math()"
snippet opt "optimal value - supersucript star" iA
^{*}
endsnippet

# priority 100
# context "math()"
# snippet "([fVvQqxy])opt" "optimal value" riA
# `!p snip.rv=match.group(1)`^*
# endsnippet

priority 200
context "math()"
snippet norm "norm" iA
\|${1:${VISUAL}}\|_{2}$0
endsnippet

context "not math()"
snippet "l([0-9p])-" "lp-norm" rA
$l_`!p snip.rv=match.group(1)`$-
endsnippet

context "math()"
snippet abs "abstract value" iA
\left\vert ${1:${VISUAL}} \right\vert $0
endsnippet

# See Section 5.1 of the document of amsmath https://texdoc.org/serve/amsmath/0
priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp|geq|leq|quad|equiv|sup|inf|max|min|dim|ker|Pr|neq|det)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet "(?<![\\a-zA-Z])arg(max|min)" "argmin" wrA
\mathop{\arg\\`!p snip.rv = match.group(1)`}
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} \,\mathrm{d} $0
endsnippet

priority 200
context "math()"
snippet '(?<![\\a-zA-Z])(arcsin|arccos|arctan|arccot|arccsc|arcsec)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

context "math()"
snippet → "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\Leftrightarrow 
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet "\s*invs" "inverse" irA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet -- "setminus" iA
\setminus
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet


context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{${1:${VISUAL}}\\} $0
endsnippet

context "math()"
snippet || "mid" iA
 \mid 
endsnippet


context "math()"
snippet cc "subset" bA
\subseteq 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet ∈ "in " iA
\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

context "math()"
snippet NN "n" iA
\mathbb{N}
endsnippet

context "math()"
snippet Nn "cap" iA
\cap 
endsnippet

context "math()"
snippet UU "cup" iA
\cup 
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" iA
\O
endsnippet


context "math()"
snippet RR "real" iA
\mathbb{R}
endsnippet

context "math()"
snippet PP "Probability" wA
\mathbb{P}
endsnippet

context "math()"
snippet QQ "Q" iA
\mathbb{Q}
endsnippet

context "math()"
snippet ZZ "Z" iA
\mathbb{Z}
endsnippet

context "math()"
snippet <! "normal" iA
\triangleleft 
endsnippet

context "math()"
snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet "(?<=\s)equation" "equation" wrA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet "(?<=\s)case" "cases" wrA
\begin{cases}
	$1 & $2\\\\
	$3 & $4\\\\
\end{cases}
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1\colon $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1(${4/[\(\)]//g}) = $0
\end{align*}
endsnippet

snippet bigopt "Optimization problem" iA
\begin{align*}
	\min \quad& ${1:f(x)}\\\\
	\text{s.t.}\quad&${2:g(x)} \leq 0\\\\
				& ${3:h(x)} = 0\\\\
\end{align*}
endsnippet


context "math()"
snippet \minimize "Optimization problem" iA
\begin{aligned}
	\min \quad& ${1:f(x)}\\\\
	\text{s.t.}\quad& ${2:g(x)} \leq 0\\\\
				& ${3:h(x)} = 0\\\\
\end{aligned}
endsnippet

context "math()"
snippet \minst "minimize" wmA
\begin{aligned}
\operatorname*{minimize}_{$1}\quad &  ${2:f_i(x_i)    } \\\\
\operatorname{subject\\ to}\quad   & $3 \\\\
                           & $0
\end{aligned}
endsnippet

snippet bigmax "Optimization problem" iA
\begin{align*}
	\max &\quad ${1:f(x)}\\\\
	\text{s.t.} &\quad ${2:g(x)} \leq 0\\\\
				&\quad ${3:h(x)} = 0\\\\
\end{align*}
endsnippet

snippet dfun "Definition of function" iA
$1\colon ${2:\mathbb{R}} \to ${3:\mathbb{R}}, ${4:x} \mapsto $0
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet


priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "(\\?[a-zA-Z]\w*)bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

# Sadly this snippet will translate \odot ⊙
# \alphadot -> \dot{\alpha}
priority 100
context "math()"
snippet "(\\?[a-zA-Z]\w+|[a-zA-Z]\w*)dot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\?[a-zA-Z]\w*)hat" "hat" riA
`!p
if not snip.c:
	temp = match.group(1)
	if temp == "\\wide":
		snip.rv = "\\widehat"
	else:
		snip.rv = "\\hat{" + temp +"}"
`
endsnippet


context "math()"
snippet ≡ "equiv" iA
\equiv
endsnippet

priority 100
context "math()"
snippet "(\\?[a-zA-Z]\w*)til" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?[a-zA-Z]\w*)~~" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\?[a-zA-Z]\w*)bb" "mathbb" riA
\mathbb{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\?[a-zA-Z]\w*)bf" "mathbf" riA
\mathbf{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\?[a-zA-Z]\w*)cal" "mathcal" riA
\mathcal{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(?<!\\)\b([a-zA-Z]+)rm" "mathrm" riA
\mathrm{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?[a-zA-Z]\w*)(vec)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

# snippet letw "let omega" iA
# Let $\Omega \subset \C$ be open.
# endsnippet

context "math()"
snippet HH "H" iA
\mathbb{H}
endsnippet

context "math()"
snippet mean "Expectation" iA
\mathbb{E}\left[ $1 \right]
endsnippet

context "math()"
snippet DD "D" iA
\mathbb{D}
endsnippet

context "math()"
snippet Cov "Covariance" iA
\mathrm{Cov} 
endsnippet

context "math()"
snippet conv "convex composition" iA
${1:\alpha} ${2:x} + (1 - $1) ${3:y}
endsnippet

context "math()"
snippet range "i = 1, \ldots, n" iA
${1:i} = ${2:1}, \ldots, ${3:n}
endsnippet

context "math()"
snippet list "a_1, ..., a_n" iA
${1:i}_${2:1}, \ldots, $1_${3:n}
endsnippet

context "math()"
snippet eps "epsilon" wA
\epsilon
endsnippet

context "math()"
snippet opn "operatorname" iA
\operatorname{${1:${VISUAL}}}
endsnippet
priority 100
context "math()"
snippet "(?<![\\a-zA-Z])(tr|diag|rank|lcm)" "math function" wr
\\operatorname{`!p snip.rv = match.group(1)`}
endsnippet

priority 200
context "math()"
snippet "(?<![\\a-zA-Z])(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)" "greek" wrA
\\`!p snip.rv = match.group(1)`
endsnippet

# See https://tex.stackexchange.com/questions/37789/using-colon-or-in-formulas
context "math()"
snippet : "colon" iA
\colon
endsnippet

context "math()"
snippet \colon= "colon" iA
:=
endsnippet

context "math()"
snippet iid "independent and identical distribution" iA
\overset{\text{i.i.d.}}{\sim}
endsnippet

context "math()"
snippet def "define equal" wA
\overset{\underset{\mathrm{def}}{}}{=}
endsnippet

context "math()"
snippet "(\\(overline|bar|hat|tilde|widetilde|widehat))(\{[\w_]*\})?" "next type of hat" wr
`!p
index = HatSequence.index(match.group(1))
try:
	snip.rv = HatSequence[(index + 1) % len(HatSequence)] + match.group(3)
except:
	snip.rv = HatSequence[(index + 1) % len(HatSequence)]
`
endsnippet

# https://www.overleaf.com/learn/latex/Font_sizes,_families,_and_styles
snippet "(\\(tiny|scriptsize|footnotesize|small|normalsize|large|Large|LARGE|huge|Huge))" "next type of font size" wr
`!p
symbol_list = FontSizeSequence
index = symbol_list.index(match.group(1))
snip.rv = symbol_list[(index + 1) % len(symbol_list)]
`
endsnippet

context "math()"
snippet "(\\(ldots|cdots|vdots|ddots))" "next type of dots" wr
`!p
symbol_list = DotsSequence
index = symbol_list.index(match.group(1))
snip.rv = symbol_list[(index + 1) % len(symbol_list)]
`
endsnippet

# Space in latex
# See https://www.overleaf.com/learn/latex/Spacing_in_math_mode#Reference_guide
# \quad : space equal to the current font size (= 18 mu)
# \ (space after backslash!):	equivalent of space in normal text
priority 300
context "math()"
snippet "(\\(,|:|;| |quad|qquad|!))" "3/4/5/normal/18/36/-3mu" wr
`!p
symbol_list = SpaceSequence
index = symbol_list.index(match.group(1))
snip.rv = symbol_list[(index + 1) % len(symbol_list)]
`
endsnippet

# as for \xleftarrow, see 4.9 Extensible arrows in doc of amsmath
context "math()"
snippet "(\\(leftarrow|longleftarrow|Leftarrow|Longleftarrow|xleftarrow))" "next type of left arrow" wr
`!p
symbol_list = LeftArrows
index = symbol_list.index(match.group(1))
snip.rv = symbol_list[(index + 1) % len(symbol_list)]
`
endsnippet

context "math()"
snippet "(\\(rightarrow|longrightarrow|Rightarrow|Longrightarrow|xrightarrow))" "next type of right arrow" wr
`!p
symbol_list = RightArrows
index = symbol_list.index(match.group(1))
snip.rv = symbol_list[(index + 1) % len(symbol_list)]
`
endsnippet


context "math()"
snippet "(\\(leftrightarrow|longleftrightarrow|Leftrightarrow|Longleftrightarrow|iff))" "next type of left right arrow" wr
`!p
symbol_list = LeftrightArrows
index = symbol_list.index(match.group(1))
snip.rv = symbol_list[(index + 1) % len(symbol_list)]
`
endsnippet



context "math()"
snippet "^.*(\\right\s*[\)\]]|\S(?<!\\right)\s*[\)\]])" "change type of parentheses: ( to \left(" wr
`!p
line = match.string
left_parentheses = findmatched_parentheses(line, len(line) - 1)
if match.group(1)[-1] == ")" and not re.fullmatch(r"\\right\s*\)", match.group(1)):
	snip.rv += line[:left_parentheses] + "\\left(" + line[left_parentheses+1:-1] + "\\right)"
elif match.group(1)[-1] == "]" and not re.fullmatch(r"\\right\s*\]", match.group(1)):
	snip.rv += line[:left_parentheses] + "\\left[" + line[left_parentheses+1:-1] + "\\right]"
elif match.group(1)[-1] == ")":
	snip.rv += line[:left_parentheses].rstrip()[:-5] + "(" + line[left_parentheses+1:-1].rstrip()[:-6] + ")"
else:
	snip.rv += line[:left_parentheses].rstrip()[:-5] + "[" + line[left_parentheses+1:-1].rstrip()[:-6] + "]"
`
endsnippet

snippet template? "What kind of template" b
template($1`!p
snip.rv = complete(t[1], ['basic', 'slide'])
`)$0
endsnippet

snippet frame "frame of slide" b
\begin{frame}{$1}
$0
\end{frame}
endsnippet


### Label and reference
context "math()"
snippet label "eqref" A
\eqref{${VISUAL}}
endsnippet

snippet eqref "eqref" A
\eqref{${VISUAL}}
endsnippet
### END Label and reference

######################
## correct typing
######################
# Usage:
# Let n<space> -> "Let $n$ "
# For each i,<space>	-> For each $i$,<space>
# 'a', 'A' and 'I' are excluded in this snippet
# This regex will match string like " s ", " s, " and " s) "
# It is very useful when there is many single-letter symbols in sentences.
context "not math()"
snippet "(?<=\s)([b-zB-HJ-Z])([,.\)]?)\s+" "surround single-letter variable" wrA
`!p 
# match.group(1) for the alphebet and the number
# match.group(2) for a possible comma or period or )
# when there is no ',' or '.' , match.group(2) = ''
snip.rv='$'+match.group(1)+'$'+match.group(2)` 
endsnippet

# Usage:
# 2n -> $2n$ 
# 2N -> $2N$ 
# 2mn -> $2mn$ 
# character like ',' '.' ')' will not stop this snippet, just like the previous one
# This snippet in fact only match words starting with numbers and following with all alphabets.
context "not math()"
snippet "(?<=\s)([0-9]+[a-zA-Z]+)([,.\)]?)\s+" "surround word starting with number" wrA
`!p 
# match.group(1) for the words staralphebet and the number
# match.group(2) for a possible comma or period or )
# when there is no ',' or '.' , match.group(2) = ''
snip.rv='$'+match.group(1)+'$'+match.group(2)` 
endsnippet

context "not math()"
snippet "(?<=\s)(\w\s*[-_+=><]\s*\w)([,.\)]?)\s+" "surround i+1" wrA
`!p
# match.group(1) for the alphebet and the number
# match.group(2) for a possible comma or period or )
# when there is no ',' or '.' , match.group(2) = ''
snip.rv='$'+match.group(1)+'$'+match.group(2)`
endsnippet


# word .	 -> word. 
# word.  , -> word,
# $i$ )		 -> $i$) 
context "not math()"
snippet "(?<=[\w\$])[,.]?\s+([,.\)])" "remove ' ' before ',' '.' ')'" iwrA
`!p snip.rv=match.group(1)` 
endsnippet

# ( word .	 -> ( word. 
context "not math()"
snippet "(?<=\()\s+(\w+)" "remove space after '('" iwrA
`!p snip.rv=match.group(1)`
endsnippet


# This is often annoying when you insert code or website in markdown
# context "not math()"
# snippet "(?<=\.)\s*([a-ce-ln-zA-Z])" "Auto upper cases after ." iwrA
 # `!p snip.rv=match.group(1).upper()`
# endsnippet


# vim: ts=2 sw=2 noet:list:ft=snippets:


context "math()"
snippet ii "LaTeX - inline math (dollars)" iA
$$1$ $0
endsnippet

context "math()"
snippet dd "LaTeX - display math (dollars)" iA
$$ $1 $$$0
endsnippet

context "math()"
snippet id "LaTeX - inline math with display style (dollars)" iA
$\displaystyle $1$ $0
endsnippet

context "math()"
snippet II "LaTeX - inline math (brackets)" iA
\($1\) $0
endsnippet

context "math()"
snippet DD "LaTeX - display math (brackets)" iA
\[$1\]$0
endsnippet

context "math()"
snippet left "LaTeX - left" iA
\left
endsnippet

context "math()"
snippet right "LaTeX - right" iA
\right
endsnippet

context "math()"
snippet langle "LaTeX - langle" iA
\langle 
endsnippet

context "math()"
snippet rangle "LaTeX - rangle" iA
\rangle 
endsnippet

context "math()"
snippet lfloor "LaTeX - lfloor" iA
\lfloor 
endsnippet

context "math()"
snippet rfloor "LaTeX - rfloor" iA
\rfloor 
endsnippet

context "math()"
snippet lceil "LaTeX - lceil" iA
\lceil 
endsnippet

context "math()"
snippet rceil "LaTeX - rceil" iA
\rceil 
endsnippet

context "math()"
snippet ulcorner "LaTeX - ulcorner" iA
\ulcorner 
endsnippet

context "math()"
snippet urcorner "LaTeX - urcorner" iA
\urcorner 
endsnippet

context "math()"
snippet llcorner "LaTeX - llcorner" iA
\llcorner 
endsnippet

context "math()"
snippet lrcorner "LaTeX - lrcorner" iA
\lrcorner 
endsnippet

context "math()"
snippet abs "LaTeX - abs" iA
\left| $1 \right| $0
endsnippet

context "math()"
snippet norm "LaTeX - norm" iA
\left\| $1 \right\| $0
endsnippet

context "math()"
snippet lrparentheses "LaTeX - lparenthesis + rparenthesis" iA
\left( $1 \right) $0
endsnippet

context "math()"
snippet lrbrackets "LaTeX - lbracket + rbracket" iA
\left[ $1 \right] $0
endsnippet

context "math()"
snippet lrcurlybrackets "LaTeX - lcurlybracket + rcurlybracket" iA
\left\{ $1 \right\\} $0
endsnippet

context "math()"
snippet lrangle "LaTeX - langle + rangle" iA
\left\langle $1 \right\rangle $0
endsnippet

context "math()"
snippet lrfloor "LaTeX - lfloor + rfloor" iA
\left\lfloor $1 \right\rfloor $0
endsnippet

context "math()"
snippet lrceil "LaTeX - lceil + rceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet oo "LaTeX - infty (alias)" iA
\infty 
endsnippet

context "math()"
snippet degr "LaTeX - degree (alias)" iA
^{\circ} 
endsnippet

context "math()"
snippet bf "LaTeX - mathbf (alias)" iA
\mathbf{$1}$0
endsnippet

context "math()"
snippet bb "LaTeX - mathbb (alias)" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet bbR "LaTeX - mathbb{R} (alias)" iA
\mathbb{R} 
endsnippet

context "math()"
snippet bbZ "LaTeX - mathbb{Z} (alias)" iA
\mathbb{Z} 
endsnippet

context "math()"
snippet bbQ "LaTeX - mathbb{Q} (alias)" iA
\mathbb{Q} 
endsnippet

context "math()"
snippet bbN "LaTeX - mathbb{N} (alias)" iA
\mathbb{N} 
endsnippet

context "math()"
snippet bbC "LaTeX - mathbb{C} (alias)" iA
\mathbb{C} 
endsnippet

context "math()"
snippet equivalent "LaTeX - Leftrightarrow (alias)" iA
\Leftrightarrow 
endsnippet

context "math()"
snippet implies "LaTeX - Rightarrow (alias)" iA
\Rightarrow 
endsnippet

context "math()"
snippet deriv "LaTeX - derivative (alias)" iA
\frac{d${1:f}}{d${2:x}} $0
endsnippet

context "math()"
snippet pderiv "LaTeX - partial derivative (alias)" iA
\frac{\partial ${1:f}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet cases "LaTeX - cases (alias)" iA
\begin{cases}
endsnippet

context "math()"
snippet frac "LaTeX - frac" iA
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet sqrt "LaTeX - sqrt" iA
\sqrt[$1]{$2}$0
endsnippet

context "math()"
snippet alpha "LaTeX - alpha" iA
\alpha 
endsnippet

context "math()"
snippet beta "LaTeX - beta" iA
\beta 
endsnippet

context "math()"
snippet gamma "LaTeX - gamma" iA
\gamma 
endsnippet

context "math()"
snippet Gamma "LaTeX - Gamma" iA
\Gamma 
endsnippet

context "math()"
snippet vargamma "LaTeX - vargamma" iA
\vargamma 
endsnippet

context "math()"
snippet delta "LaTeX - delta" iA
\delta 
endsnippet

context "math()"
snippet Delta "LaTeX - Delta" iA
\Delta 
endsnippet

context "math()"
snippet epsilon "LaTeX - epsilon" iA
\epsilon 
endsnippet

context "math()"
snippet varepsilon "LaTeX - varepsilon" iA
\varepsilon 
endsnippet

context "math()"
snippet zeta "LaTeX - zeta" iA
\zeta 
endsnippet

context "math()"
snippet eta "LaTeX - eta" iA
\eta 
endsnippet

context "math()"
snippet theta "LaTeX - theta" iA
\theta 
endsnippet

context "math()"
snippet Theta "LaTeX - Theta" iA
\Theta 
endsnippet

context "math()"
snippet vartheta "LaTeX - vartheta" iA
\vartheta 
endsnippet

context "math()"
snippet iota "LaTeX - iota" iA
\iota 
endsnippet

context "math()"
snippet kappa "LaTeX - kappa" iA
\kappa 
endsnippet

context "math()"
snippet lambda "LaTeX - lambda" iA
\lambda 
endsnippet

context "math()"
snippet Lambda "LaTeX - Lambda" iA
\Lambda 
endsnippet

context "math()"
snippet mu "LaTeX - mu" iA
\mu 
endsnippet

context "math()"
snippet nu "LaTeX - nu" iA
\nu 
endsnippet

context "math()"
snippet xi "LaTeX - xi" iA
\xi 
endsnippet

context "math()"
snippet Xi "LaTeX - Xi" iA
\Xi 
endsnippet

context "math()"
snippet pi "LaTeX - pi" iA
\pi 
endsnippet

context "math()"
snippet Pi "LaTeX - Pi" iA
\Pi 
endsnippet

context "math()"
snippet varpi "LaTeX - varpi" iA
\varpi 
endsnippet

context "math()"
snippet rho "LaTeX - rho" iA
\rho 
endsnippet

context "math()"
snippet varrho "LaTeX - varrho" iA
\varrho 
endsnippet

context "math()"
snippet sigma "LaTeX - sigma" iA
\sigma 
endsnippet

context "math()"
snippet Sigma "LaTeX - Sigma" iA
\Sigma 
endsnippet

context "math()"
snippet varsigma "LaTeX - varsigma" iA
\varsigma 
endsnippet

context "math()"
snippet tau "LaTeX - tau" iA
\tau 
endsnippet

context "math()"
snippet upsilon "LaTeX - upsilon" iA
\upsilon 
endsnippet

context "math()"
snippet Upsilon "LaTeX - Upsilon" iA
\Upsilon 
endsnippet

context "math()"
snippet phi "LaTeX - phi" iA
\phi 
endsnippet

context "math()"
snippet Phi "LaTeX - Phi" iA
\Phi 
endsnippet

context "math()"
snippet varphi "LaTeX - varphi" iA
\varphi 
endsnippet

context "math()"
snippet chi "LaTeX - chi" iA
\chi 
endsnippet

context "math()"
snippet psi "LaTeX - psi" iA
\psi 
endsnippet

context "math()"
snippet Psi "LaTeX - Psi" iA
\Psi 
endsnippet

context "math()"
snippet omega "LaTeX - omega" iA
\omega 
endsnippet

context "math()"
snippet Omega "LaTeX - Omega" iA
\Omega 
endsnippet

context "math()"
snippet digamma "LaTeX - digamma" iA
\digamma 
endsnippet

context "math()"
snippet Digamma "LaTeX - Digamma" iA
\Digamma 
endsnippet

context "math()"
snippet aleph "LaTeX - aleph" iA
\aleph 
endsnippet

context "math()"
snippet beth "LaTeX - beth" iA
\beth 
endsnippet

context "math()"
snippet gimel "LaTeX - gimel" iA
\gimel 
endsnippet

context "math()"
snippet daleth "LaTeX - daleth" iA
\daleth 
endsnippet

context "math()"
snippet cup "LaTeX - cup" iA
\cup 
endsnippet

context "math()"
snippet cap "LaTeX - cap" iA
\cap 
endsnippet

context "math()"
snippet sqcup "LaTeX - sqcup" iA
\sqcup 
endsnippet

context "math()"
snippet sqcap "LaTeX - sqcap" iA
\sqcap 
endsnippet

context "math()"
snippet subset "LaTeX - subset" iA
\subset 
endsnippet

context "math()"
snippet notsubset "LaTeX - notsubset" iA
\not\subset 
endsnippet

context "math()"
snippet subseteq "LaTeX - subseteq" iA
\subseteq 
endsnippet

context "math()"
snippet nsubseteq "LaTeX - nsubseteq" iA
\nsubseteq 
endsnippet

context "math()"
snippet sqsubset "LaTeX - sqsubset" iA
\sqsubset 
endsnippet

context "math()"
snippet sqsubseteq "LaTeX - sqsubseteq" iA
\sqsubseteq 
endsnippet

context "math()"
snippet sqsupset "LaTeX - sqsupset" iA
\sqsupset 
endsnippet

context "math()"
snippet sqsupseteq "LaTeX - sqsupseteq" iA
\sqsupseteq 
endsnippet

context "math()"
snippet supset "LaTeX - supset" iA
\supset 
endsnippet

context "math()"
snippet notsupset "LaTeX - notsupset" iA
\not\supset 
endsnippet

context "math()"
snippet supseteq "LaTeX - supseteq" iA
\supseteq 
endsnippet

context "math()"
snippet nsupseteq "LaTeX - nsupseteq" iA
\nsupseteq 
endsnippet

context "math()"
snippet in "LaTeX - in" iA
\in 
endsnippet

context "math()"
snippet ni "LaTeX - ni" iA
\ni 
endsnippet

context "math()"
snippet notin "LaTeX - not in" iA
\not\in 
endsnippet

context "math()"
snippet not "LaTeX - not" iA
\not 
endsnippet

context "math()"
snippet varnothing "LaTeX - varnothing" iA
\varnothing 
endsnippet

context "math()"
snippet emptyset "LaTeX - emptyset" iA
\emptyset 
endsnippet

context "math()"
snippet setminus "LaTeX - setminus" iA
\setminus 
endsnippet

context "math()"
snippet equiv "LaTeX - equiv" iA
\equiv 
endsnippet

context "math()"
snippet forall "LaTeX - forall" iA
\forall 
endsnippet

context "math()"
snippet exists "LaTeX - exists" iA
\exists 
endsnippet

context "math()"
snippet nexists "LaTeX - nexists" iA
\nexists 
endsnippet

context "math()"
snippet therefore "LaTeX - therefore" iA
\therefore 
endsnippet

context "math()"
snippet because "LaTeX - because" iA
\because 
endsnippet

context "math()"
snippet neg "LaTeX - neg" iA
\neg 
endsnippet

context "math()"
snippet lnot "LaTeX - lnot" iA
\lnot 
endsnippet

context "math()"
snippet vee "LaTeX - vee" iA
\vee 
endsnippet

context "math()"
snippet lor "LaTeX - lor" iA
\lor 
endsnippet

context "math()"
snippet wedge "LaTeX - wedge" iA
\wedge 
endsnippet

context "math()"
snippet land "LaTeX - land" iA
\land 
endsnippet

context "math()"
snippet vdash "LaTeX - vdash" iA
\vdash 
endsnippet

context "math()"
snippet dashv "LaTeX - dashv" iA
\dashv 
endsnippet

context "math()"
snippet models "LaTeX - models" iA
\models 
endsnippet

context "math()"
snippet acute "LaTeX - acute" iA
\acute{$1}$0
endsnippet

context "math()"
snippet breve "LaTeX - breve" iA
\breve{$1}$0
endsnippet

context "math()"
snippet check "LaTeX - check" iA
\check{$1}$0
endsnippet

context "math()"
snippet mathring "LaTeX - mathring" iA
\mathring{$1}$0
endsnippet

context "math()"
snippet grave "LaTeX - grave" iA
\grave{$1}$0
endsnippet

context "math()"
snippet dot "LaTeX - dot" iA
\dot{$1}$0
endsnippet

context "math()"
snippet ddot "LaTeX - ddot" iA
\ddot{$1}$0
endsnippet

context "math()"
snippet hat "LaTeX - hat" iA
\hat{$1}$0
endsnippet

context "math()"
snippet tilde "LaTeX - tilde" iA
\tilde{$1}$0
endsnippet

context "math()"
snippet bar "LaTeX - bar" iA
\bar{$1}$0
endsnippet

context "math()"
snippet vec "LaTeX - vec" iA
\vec{$1}$0
endsnippet

context "math()"
snippet mathbf "LaTeX - mathbf" iA
\mathbf{$1}$0
endsnippet

context "math()"
snippet mathbb "LaTeX - mathbb" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet mathcal "LaTeX - mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet mathfrak "LaTeX - mathfrak" iA
\mathfrak{$1}$0
endsnippet

context "math()"
snippet mathscr "LaTeX - mathscr" iA
\mathscr{$1}$0
endsnippet

context "math()"
snippet overline "LaTeX - overline" iA
\overline{$1}$0
endsnippet

context "math()"
snippet widehat "LaTeX - widehat" iA
\widehat{$1}$0
endsnippet

context "math()"
snippet widetilde "LaTeX - widetilde" iA
\widetilde{$1}$0
endsnippet

context "math()"
snippet overbrace "LaTeX - overbrace" iA
\overbrace{$1}^{$2}$0
endsnippet

context "math()"
snippet underbrace "LaTeX - underbrace" iA
\underbrace{$1}_{$2}$0
endsnippet

context "math()"
snippet sin "LaTeX - sin" iA
\sin 
endsnippet

context "math()"
snippet cos "LaTeX - cos" iA
\cos 
endsnippet

context "math()"
snippet tan "LaTeX - tan" iA
\tan 
endsnippet

context "math()"
snippet sec "LaTeX - sec" iA
\sec 
endsnippet

context "math()"
snippet csc "LaTeX - csc" iA
\csc 
endsnippet

context "math()"
snippet cot "LaTeX - cot" iA
\cot 
endsnippet

context "math()"
snippet exp "LaTeX - exp" iA
\exp 
endsnippet

context "math()"
snippet log "LaTeX - log" iA
\log_{$1} $0
endsnippet

context "math()"
snippet ln "LaTeX - ln" iA
\ln 
endsnippet

context "math()"
snippet lg "LaTeX - lg" iA
\lg 
endsnippet

context "math()"
snippet sinh "LaTeX - sinh" iA
\sinh 
endsnippet

context "math()"
snippet cosh "LaTeX - cosh" iA
\cosh 
endsnippet

context "math()"
snippet tanh "LaTeX - tanh" iA
\tanh 
endsnippet

context "math()"
snippet coth "LaTeX - coth" iA
\coth 
endsnippet

context "math()"
snippet det "LaTeX - det" iA
\det 
endsnippet

context "math()"
snippet dim "LaTeX - dim" iA
\dim 
endsnippet

context "math()"
snippet ker "LaTeX - ker" iA
\ker 
endsnippet

context "math()"
snippet deg "LaTeX - deg" iA
\deg 
endsnippet

context "math()"
snippet arg "LaTeX - arg" iA
\arg 
endsnippet

context "math()"
snippet gcd "LaTeX - gcd" iA
\gcd 
endsnippet

context "math()"
snippet arcsin "LaTeX - arcsin" iA
\arcsin 
endsnippet

context "math()"
snippet arccos "LaTeX - arccos" iA
\arccos 
endsnippet

context "math()"
snippet arctan "LaTeX - arctan" iA
\arctan 
endsnippet

context "math()"
snippet arccsc "LaTeX - arccsc" iA
\operatorname{arccsc} 
endsnippet

context "math()"
snippet arcsec "LaTeX - arcsec" iA
\operatorname{arcsec} 
endsnippet

context "math()"
snippet arccot "LaTeX - arccot" iA
\operatorname{arccot} 
endsnippet

context "math()"
snippet arsinh "LaTeX - arsinh" iA
\operatorname{arsinh} 
endsnippet

context "math()"
snippet arcosh "LaTeX - arcosh" iA
\operatorname{arcosh} 
endsnippet

context "math()"
snippet artanh "LaTeX - artanh" iA
\operatorname{artanh} 
endsnippet

context "math()"
snippet csch "LaTeX - csch" iA
\operatorname{csch} 
endsnippet

context "math()"
snippet sech "LaTeX - sech" iA
\operatorname{sech} 
endsnippet

context "math()"
snippet arcsch "LaTeX - arcsch" iA
\operatorname{arcsch} 
endsnippet

context "math()"
snippet arsech "LaTeX - arsech" iA
\operatorname{arsech} 
endsnippet

context "math()"
snippet arcoth "LaTeX - arcoth" iA
\operatorname{arcoth} 
endsnippet

context "math()"
snippet min "LaTeX - min" iA
\min 
endsnippet

context "math()"
snippet max "LaTeX - max" iA
\max 
endsnippet

context "math()"
snippet inf "LaTeX - inf" iA
\inf 
endsnippet

context "math()"
snippet sup "LaTeX - sup" iA
\sup 
endsnippet

context "math()"
snippet liminf "LaTeX - liminf" iA
\liminf 
endsnippet

context "math()"
snippet limsup "LaTeX - limsup" iA
\limsup 
endsnippet

context "math()"
snippet lim "LaTeX - lim" iA
\lim_{${1:x} \to ${2:\infty}} $0
endsnippet

context "math()"
snippet leq "LaTeX - leq" iA
\leq 
endsnippet

context "math()"
snippet geq "LaTeX - geq" iA
\geq 
endsnippet

context "math()"
snippet neq "LaTeX - neq" iA
\neq 
endsnippet

context "math()"
snippet leqslant "LaTeX - leqslant" iA
\leqslant 
endsnippet

context "math()"
snippet geqslant "LaTeX - geqslant" iA
\geqslant 
endsnippet

context "math()"
snippet ll "LaTeX - ll" iA
\ll 
endsnippet

context "math()"
snippet lll "LaTeX - lll" iA
\lll 
endsnippet

context "math()"
snippet gg "LaTeX - gg" iA
\gg 
endsnippet

context "math()"
snippet ggg "LaTeX - ggg" iA
\ggg 
endsnippet

context "math()"
snippet nless "LaTeX - nless" iA
\nless 
endsnippet

context "math()"
snippet nleq "LaTeX - nleq" iA
\nleq 
endsnippet

context "math()"
snippet nleqslant "LaTeX - nleqslant" iA
\nleqslant 
endsnippet

context "math()"
snippet ngtr "LaTeX - ngtr" iA
\ngtr 
endsnippet

context "math()"
snippet ngeq "LaTeX - ngeq" iA
\ngeq 
endsnippet

context "math()"
snippet ngeqslant "LaTeX - ngeqslant" iA
\ngeqslant 
endsnippet

context "math()"
snippet approx "LaTeX - approx" iA
\approx 
endsnippet

context "math()"
snippet asymp "LaTeX - asymp" iA
\asymp 
endsnippet

context "math()"
snippet prec "LaTeX - prec" iA
\prec 
endsnippet

context "math()"
snippet nprec "LaTeX - nprec" iA
\nprec 
endsnippet

context "math()"
snippet preceq "LaTeX - preceq" iA
\preceq 
endsnippet

context "math()"
snippet npreceq "LaTeX - npreceq" iA
\npreceq 
endsnippet

context "math()"
snippet succ "LaTeX - succ" iA
\succ 
endsnippet

context "math()"
snippet nsucc "LaTeX - nsucc" iA
\nsucc 
endsnippet

context "math()"
snippet succeq "LaTeX - succeq" iA
\succeq 
endsnippet

context "math()"
snippet nsucceq "LaTeX - nsucceq" iA
\nsucceq 
endsnippet

context "math()"
snippet propto "LaTeX - propto" iA
\propto 
endsnippet

context "math()"
snippet doteq "LaTeX - doteq" iA
\doteq 
endsnippet

context "math()"
snippet triangle "LaTeX - triangle" iA
\triangle 
endsnippet

context "math()"
snippet triangleright "LaTeX - triangleright" iA
\triangleright 
endsnippet

context "math()"
snippet triangleleft "LaTeX - triangleleft" iA
\triangleleft 
endsnippet

context "math()"
snippet angle "LaTeX - angle" iA
\angle 
endsnippet

context "math()"
snippet measuredangle "LaTeX - measuredangle" iA
\measuredangle 
endsnippet

context "math()"
snippet ell "LaTeX - ell" iA
\ell 
endsnippet

context "math()"
snippet parallel "LaTeX - parallel" iA
\parallel 
endsnippet

context "math()"
snippet nparallel "LaTeX - nparallel" iA
\nparallel 
endsnippet

context "math()"
snippet bowtie "LaTeX - bowtie" iA
\bowtie 
endsnippet

context "math()"
snippet perp "LaTeX - perp" iA
\perp 
endsnippet

context "math()"
snippet notperp "LaTeX - notperp" iA
\not\perp 
endsnippet

context "math()"
snippet smile "LaTeX - smile" iA
\smile 
endsnippet

context "math()"
snippet frown "LaTeX - frown" iA
\frown 
endsnippet

context "math()"
snippet circ "LaTeX - circ" iA
\circ 
endsnippet

context "math()"
snippet degree "LaTeX - degree" iA
\degree 
endsnippet

context "math()"
snippet cong "LaTeX - cong" iA
\cong 
endsnippet

context "math()"
snippet ncong "LaTeX - ncong" iA
\ncong 
endsnippet

context "math()"
snippet sim "LaTeX - sim" iA
\sim 
endsnippet

context "math()"
snippet simeq "LaTeX - simeq" iA
\simeq 
endsnippet

context "math()"
snippet nsim "LaTeX - nsim" iA
\nsim 
endsnippet

context "math()"
snippet bullet "LaTeX - bullet" iA
\bullet 
endsnippet

context "math()"
snippet diamond "LaTeX - diamond" iA
\diamond 
endsnippet

context "math()"
snippet uplus "LaTeX - uplus" iA
\uplus 
endsnippet

context "math()"
snippet oplus "LaTeX - oplus" iA
\oplus 
endsnippet

context "math()"
snippet ominus "LaTeX - ominus" iA
\ominus 
endsnippet

context "math()"
snippet odot "LaTeX - odot" iA
\odot 
endsnippet

context "math()"
snippet otimes "LaTeX - otimes" iA
\otimes 
endsnippet

context "math()"
snippet oslash "LaTeX - oslash" iA
\oslash 
endsnippet

context "math()"
snippet upharpoonright "LaTeX - upharpoonright" iA
\upharpoonright 
endsnippet

context "math()"
snippet cdot "LaTeX - cdot" iA
\cdot 
endsnippet

context "math()"
snippet cdots "LaTeX - cdots" iA
\cdots 
endsnippet

context "math()"
snippet ldots "LaTeX - ldots" iA
\ldots 
endsnippet

context "math()"
snippet vdots "LaTeX - vdots" iA
\vdots 
endsnippet

context "math()"
snippet ddots "LaTeX - ddots" iA
\ddots 
endsnippet

context "math()"
snippet pm "LaTeX - pm" iA
\pm 
endsnippet

context "math()"
snippet mp "LaTeX - mp" iA
\mp 
endsnippet

context "math()"
snippet times "LaTeX - times" iA
\times 
endsnippet

context "math()"
snippet div "LaTeX - div" iA
\div 
endsnippet

context "math()"
snippet ast "LaTeX - ast" iA
\ast 
endsnippet

context "math()"
snippet mid "LaTeX - mid" iA
\mid 
endsnippet

context "math()"
snippet nmid "LaTeX - nmid" iA
\nmid 
endsnippet

context "math()"
snippet partial "LaTeX - partial" iA
\partial 
endsnippet

context "math()"
snippet nabla "LaTeX - nabla" iA
\nabla 
endsnippet

context "math()"
snippet hbar "LaTeX - hbar" iA
\hbar 
endsnippet

context "math()"
snippet star "LaTeX - star" iA
\star 
endsnippet

context "math()"
snippet surd "LaTeX - surd" iA
\surd 
endsnippet

context "math()"
snippet checkmark "LaTeX - checkmark" iA
\checkmark 
endsnippet

context "math()"
snippet bigcirc "LaTeX - bigcirc" iA
\bigcirc 
endsnippet

context "math()"
snippet amalg "LaTeX - amalg" iA
\amalg 
endsnippet

context "math()"
snippet bigtriangleup "LaTeX - bigtriangleup" iA
\bigtriangleup 
endsnippet

context "math()"
snippet bigtriangledown "LaTeX - bigtriangledown" iA
\bigtriangledown 
endsnippet

context "math()"
snippet dagger "LaTeX - dagger" iA
\dagger 
endsnippet

context "math()"
snippet ddagger "LaTeX - ddagger" iA
\ddagger 
endsnippet

context "math()"
snippet wr "LaTeX - wr" iA
\wr 
endsnippet

context "math()"
snippet wp "LaTeX - wp" iA
\wp 
endsnippet

context "math()"
snippet Re "LaTeX - Re" iA
\Re 
endsnippet

context "math()"
snippet Im "LaTeX - Im" iA
\Im 
endsnippet

context "math()"
snippet imath "LaTeX - imath" iA
\imath 
endsnippet

context "math()"
snippet jmath "LaTeX - jmath" iA
\jmath 
endsnippet

context "math()"
snippet eth "LaTeX - eth" iA
\eth 
endsnippet

context "math()"
snippet prime "LaTeX - prime" iA
\prime 
endsnippet

context "math()"
snippet Box "LaTeX - Box" iA
\Box 
endsnippet

context "math()"
snippet bot "LaTeX - bot" iA
\bot 
endsnippet

context "math()"
snippet top "LaTeX - top" iA
\top 
endsnippet

context "math()"
snippet infty "LaTeX - infty" iA
\infty 
endsnippet

context "math()"
snippet sum "LaTeX - sum" iA
\sum_{$1}^{$2}$0
endsnippet

context "math()"
snippet prod "LaTeX - prod" iA
\prod_{$1}^{$2}$0
endsnippet

context "math()"
snippet int "LaTeX - int" iA
\int_{$1}^{$2}$0
endsnippet

context "math()"
snippet iint "LaTeX - iint" iA
\iint_{$1}^{$2}$0
endsnippet

context "math()"
snippet iiint "LaTeX - iiint" iA
\iiint_{$1}^{$2}$0
endsnippet

context "math()"
snippet oint "LaTeX - oint" iA
\oint_{$1}^{$2}$0
endsnippet

context "math()"
snippet bigcup "LaTeX - bigcup" iA
\bigcup_{$1}^{$2}$0
endsnippet

context "math()"
snippet bigcap "LaTeX - bigcap" iA
\bigcap_{$1}^{$2}$0
endsnippet

context "math()"
snippet bigvee "LaTeX - bigvee" iA
\bigvee_{$1}^{$2}$0
endsnippet

context "math()"
snippet bigwedge "LaTeX - bigwedge" iA
\bigwedge_{$1}^{$2}$0
endsnippet

context "math()"
snippet coprod "LaTeX - coprod" iA
\coprod_{$1}^{$2}$0
endsnippet

context "math()"
snippet biguplus "LaTeX - biguplus" iA
\biguplus_{$1}^{$2}$0
endsnippet

context "math()"
snippet bigodot "LaTeX - bigodot" iA
\bigodot_{$1}^{$2}$0
endsnippet

context "math()"
snippet bigoplus "LaTeX - bigoplus" iA
\bigoplus_{$1}^{$2}$0
endsnippet

context "math()"
snippet bigotimes "LaTeX - bigotimes" iA
\bigotimes_{$1}^{$2}$0
endsnippet

context "math()"
snippet iff "LaTeX - iff" iA
\iff 
endsnippet

context "math()"
snippet implies "LaTeX - implies" iA
\implies 
endsnippet

context "math()"
snippet rightarrow "LaTeX - rightarrow" iA
\rightarrow 
endsnippet

context "math()"
snippet to "LaTeX - to" iA
\to 
endsnippet

context "math()"
snippet nrightarrow "LaTeX - nrightarrow" iA
\nrightarrow 
endsnippet

context "math()"
snippet longrightarrow "LaTeX - longrightarrow" iA
\longrightarrow 
endsnippet

context "math()"
snippet Rightarrow "LaTeX - Rightarrow" iA
\Rightarrow 
endsnippet

context "math()"
snippet Longrightarrow "LaTeX - Longrightarrow" iA
\Longrightarrow 
endsnippet

context "math()"
snippet Leftarrow "LaTeX - Leftarrow" iA
\Leftarrow 
endsnippet

context "math()"
snippet Longleftarrow "LaTeX - Longleftarrow" iA
\Longleftarrow 
endsnippet

context "math()"
snippet Leftrightarrow "LaTeX - Leftrightarrow" iA
\Leftrightarrow 
endsnippet

context "math()"
snippet Longleftrightarrow "LaTeX - Longleftrightarrow" iA
\Longleftrightarrow 
endsnippet

context "math()"
snippet nRightarrow "LaTeX - nRightarrow" iA
\nRightarrow 
endsnippet

context "math()"
snippet leadsto "LaTeX - leadsto" iA
\leadsto 
endsnippet

context "math()"
snippet mapsto "LaTeX - mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet longmapsto "LaTeX - longmapsto" iA
\longmapsto 
endsnippet

context "math()"
snippet longleftarrow "LaTeX - longleftarrow" iA
\longleftarrow 
endsnippet

context "math()"
snippet leftarrow "LaTeX - leftarrow" iA
\leftarrow 
endsnippet

context "math()"
snippet gets "LaTeX - gets" iA
\gets 
endsnippet

context "math()"
snippet leftrightarrow "LaTeX - leftrightarrow" iA
\leftrightarrow 
endsnippet

context "math()"
snippet longleftrightarrow "LaTeX - longleftrightarrow" iA
\longleftrightarrow 
endsnippet

context "math()"
snippet downarrow "LaTeX - downarrow" iA
\downarrow 
endsnippet

context "math()"
snippet Downarrow "LaTeX - Downarrow" iA
\Downarrow 
endsnippet

context "math()"
snippet uparrow "LaTeX - uparrow" iA
\uparrow 
endsnippet

context "math()"
snippet Uparrow "LaTeX - Uparrow" iA
\Uparrow 
endsnippet

context "math()"
snippet updownarrow "LaTeX - updownarrow" iA
\updownarrow 
endsnippet

context "math()"
snippet Updownarrow "LaTeX - Updownarrow" iA
\Updownarrow 
endsnippet

context "math()"
snippet hookleftarrow "LaTeX - hookleftarrow" iA
\hookleftarrow 
endsnippet

context "math()"
snippet hookrightarrow "LaTeX - hookrightarrow" iA
\hookrightarrow 
endsnippet

context "math()"
snippet leftharpoonup "LaTeX - leftharpoonup" iA
\leftharpoonup 
endsnippet

context "math()"
snippet rightharpoonup "LaTeX - rightharpoonup" iA
\rightharpoonup 
endsnippet

context "math()"
snippet leftharpoondown "LaTeX - leftharpoondown" iA
\leftharpoondown 
endsnippet

context "math()"
snippet rightharpoondown "LaTeX - rightharpoondown" iA
\rightharpoondown 
endsnippet

context "math()"
snippet rightleftharpoons "LaTeX - rightleftharpoons" iA
\rightleftharpoons 
endsnippet

context "math()"
snippet nearrow "LaTeX - nearrow" iA
\nearrow 
endsnippet

context "math()"
snippet searrow "LaTeX - searrow" iA
\searrow 
endsnippet

context "math()"
snippet nwarrow "LaTeX - nwarrow" iA
\nwarrow 
endsnippet

context "math()"
snippet swarrow "LaTeX - swarrow" iA
\swarrow 
endsnippet

context "math()"
snippet overrightarrow "LaTeX - overrightarrow" iA
\overrightarrow{$1}$0
endsnippet

context "math()"
snippet underrightarrow "LaTeX - underrightarrow" iA
\underrightarrow{$1}$0
endsnippet

context "math()"
snippet overleftarrow "LaTeX - overleftarrow" iA
\overleftarrow{$1}$0
endsnippet

context "math()"
snippet underleftarrow "LaTeX - underleftarrow" iA
\underleftarrow{$1}$0
endsnippet

context "math()"
snippet overleftrightarrow "LaTeX - overleftrightarrow" iA
\overleftrightarrow{$1}$0
endsnippet

context "math()"
snippet underleftrightarrow "LaTeX - underleftrightarrow" iA
\underleftrightarrow{$1}$0
endsnippet

context "math()"
snippet text "LaTeX - text" iA
\text{$1}$0
endsnippet

context "math()"
snippet operatorname "LaTeX - operatorname" iA
\operatorname{$1}$0
endsnippet

context "math()"
snippet displaystyle  "LaTeX - displaystyle " iA
\displaystyle 
endsnippet

context "math()"
snippet textbackslash  "LaTeX - textbackslash " iA
\textbackslash 
endsnippet

